#!/bin/bash
# set -x

# Set of valid agents - add new agents here
export VALID_AGENTS=$(ls aries-backchannels/*/Dockerfile.* | sed "s/^.*file.//" |  tr "\n" " " | sort -u)

export MSYS_NO_PATHCONV=1
# getDockerHost; for details refer to https://github.com/bcgov/DITP-DevOps/tree/main/code/snippets#getdockerhost
. /dev/stdin <<<"$(cat <(curl -s --raw https://raw.githubusercontent.com/bcgov/DITP-DevOps/main/code/snippets/getDockerHost))"
export DOCKERHOST=$(getDockerHost)

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"
export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-aath}"
export AGENT_TIMEOUT=30
export LEDGER_TIMEOUT=60
# these can be overridden via env vars
export LEDGER_URL_CONFIG="${LEDGER_URL_CONFIG}"
export TAILS_SERVER_URL_CONFIG="${TAILS_SERVER_URL_CONFIG}"
export REDIS_CLUSTER_URL_CONFIG="${REDIS_CLUSTER_URL_CONFIG}"
export AGENT_CONFIG_FILE="${AGENT_CONFIG_FILE}"
export GENESIS_URL="${GENESIS_URL}"
export GENESIS_FILE="${GENESIS_FILE}"

# these are derived from the above two
LEDGER_URL_INTERNAL="${LEDGER_URL_CONFIG:-http://${DOCKERHOST}:9000}"
export LEDGER_URL_HOST="${LEDGER_URL_CONFIG:-http://localhost:9000}"
export TAILS_SERVER_URL_HOST="${TAILS_SERVER_URL_CONFIG:-http://localhost:6543}"
TAILS_SERVER_URL_INTERNAL="${TAILS_SERVER_URL_CONFIG:-http://${DOCKERHOST}:6543}"
# important: inside the internal URLs, we replace "://localhost:" with "://${DOCKERHOST}:"
#   so it works inside docker.
LEDGER_URL_INTERNAL="$(echo ${LEDGER_URL_INTERNAL} | sed "s/:\/\/localhost:/:\/\/${DOCKERHOST}:/" )"
TAILS_SERVER_URL_INTERNAL="$(echo "${TAILS_SERVER_URL_INTERNAL}" | sed "s/:\/\/localhost:/:\/\/${DOCKERHOST}:/" )"

export REDIS_CLUSTER_URL_HOST="${REDIS_CLUSTER_URL_CONFIG:-http://localhost:6377}"


# Running on Windows?
if [[ "$OSTYPE" == "msys" ]]; then
  # Prefix interactive terminal commands ...
  terminalEmu="winpty"
fi

export INTERACTIVE="-it"
if [[ "$NO_TTY" == "1" ]]; then
  unset INTERACTIVE
fi

#Running on Play with Docker?
if [ "${PWD_HOST_FQDN}" != "" ]; then
  if [ "${PWD_HOST_FQDN}" == "labs.play-with-docker.com" ]; then
    export ETH_CONFIG="eth1"
  elif [ "${PWD_HOST_FQDN}" == "play-with-docker.vonx.io" ]; then
    export ETH_CONFIG="eth0"
  else
    export ETH_CONFIG="eth0"
  fi
  myhost=`ifconfig ${ETH_CONFIG} | grep inet | cut -d':' -f2 | cut -d' ' -f1 | sed 's/\./\-/g'`
  if [ "${GENESIS_URL}" == "" ]; then
    export GENESIS_URL="http://ip${myhost}-${SESSION_ID}-9000.direct.${PWD_HOST_FQDN}/genesis"
  fi
  # Check if von-network is running
  # Should this be moved out of the Play with Docker section?
  if [ "${1}" == "run" ]; then
    curl -s ${GENESIS_URL} > /dev/null
    res=$?
    if test "$res" != "0"; then
      echo "Error: Unable to find the genesis file for the Indy Network"
      echo "Is von-network running?"
      echo GENESIS_URL: ${GENESIS_URL}
      exit 1
    fi
  fi
fi

# Set default platform to linux/amd64 when running on Arm based MAC since there are no arm based images available currently.
if [[ $OSTYPE == 'darwin'* ]]; then
  architecture=$(uname -m)
  if [[ "${architecture}" == 'arm'* ]] || [[ "${architecture}" == 'aarch'* ]]; then
    export DOCKER_DEFAULT_PLATFORM=linux/amd64
  fi
fi

# ========================================================================================================
# Check Docker Compose
# --------------------------------------------------------------------------------------------------------

# Default to deprecated V1 'docker-compose'.
dockerCompose="docker-compose --log-level ERROR"

# Prefer 'docker compose' V2 if available
if [[ $(docker compose version 2> /dev/null) == 'Docker Compose'* ]]; then
  export dockerCompose="docker --log-level error compose"
fi
# echo "Using: ${dockerCompose}"

## Load up shell functions used in this file
source "$(dirname "$0")"/manage-utils.sh

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
# Command to run must be the first argument
COMMAND=$(toLower ${1})
shift

# Handle run args
if [[ "${COMMAND}" == "run" || "${COMMAND}" == "start" || "${COMMAND}" == "test" || "${COMMAND}" == "dry-run" ]]; then
  ACME="none"
  BOB="none"
  FABER="none"
  MALLORY="none"
  TAGS=""
  BEHAVE_INI=aries-test-harness/behave.ini

  while getopts "hna:b:f:m:r:e:d:t:v:i:" FLAG; do
    case $FLAG in
        h ) usage ;;
        : ) usage ;;
        \? ) #unrecognized option - show help
        echo -e \\n"Invalid script option: -${OPTARG}"\\n
        usage
            ;;
        r ) export REPORT=${OPTARG}
            ;;
        e ) export REPORT_ERROR_TYPE=${OPTARG}
            ;;
        a ) export ACME=${OPTARG}
            ;;
        b ) export BOB=${OPTARG}
            ;;
        f ) export FABER=${OPTARG}
            ;;
        m ) export MALLORY=${OPTARG}
            ;;
        t ) export TAGS="${TAGS} --tags=${OPTARG}"
            ;;
        v ) export AIP_CONFIG=${OPTARG}
            ;;
        i ) export BEHAVE_INI=${OPTARG}
            ;;
        n ) export USE_NGROK="true"
            ;;
        d )
            export ACME=${OPTARG}
            export BOB=${OPTARG}
            export FABER=${OPTARG}
            export MALLORY=${OPTARG}
            ;;
    esac
  done
  shift $((OPTIND-1))

  if [[ "${COMMAND}" == "run" || "${COMMAND}" == "test" ]]; then
    for agent in ${ACME} ${BOB} ${FABER} ${MALLORY}; do
        if [[ $(isAgent $agent) == false ]] ; then
            echo All agents Acme, Bob, Faber and Mallory must be set to one of: ${VALID_AGENTS}.
            echo Use \"${0} help\" to get more information.
            exit 1
        fi
        if [ "$agent" == "mobile" ]; then
          printLetsEncryptWarning
        fi
    done

    if [ ! -f "${BEHAVE_INI}" ]; then
      echo Error - behave INI file does not exist: ${BEHAVE_INI}
      exit 1
    fi

    if [[ "$@" ]]; then
        echo "Other args:  $@"
    fi
  fi
fi

# Handle additional Build arguments
if [[ "${COMMAND}" == "build" || "${COMMAND}" == "rebuild" ]]; then

  while getopts "ha:" FLAG; do
    case $FLAG in
        h ) usage ;;
        : ) usage ;;
        \? ) #unrecognized option - show help
        set -- "$@" "$FLAG"
            ;;
        a ) export BUILD_AGENTS="${BUILD_AGENTS} ${OPTARG}"
            ;;
    esac
  done
  shift $((OPTIND-1))

  if [ "${BUILD_AGENTS}" == "" ]; then
     BUILD_AGENTS=${VALID_AGENTS}
  fi

  if [[ "${TAGS}" =~ "@Mobile" ]]; then
    printLetsEncryptWarning
  fi
fi

# Handle the runset arguments
if [[ "${COMMAND}" == "runset" ]]; then

  if [[ "$1" == "" || "$1" == "-h" || "$1" == "help" || "$1" == "--help" ]]; then
      runSetUsage
      exit 1
  fi

  export runSet=$1
  shift

  while getopts "hbrn" FLAG; do
    case $FLAG in
        b ) runSetBuild=1
            ;;
        r ) export runSetBuild=1
            export runSetReBuild=re
            ;;
        n ) export runSetDryRun="echo Command to run: "
            ;;
        h ) runSetUsage
            exit 1
            ;;
        \? ) #unrecognized option - show help
            runSetUsage
            exit 1
            ;;
    esac
  done
fi

pushd "${SCRIPT_HOME}" >/dev/null
exit_status=0

case "${COMMAND}" in
  build)
      buildImages "${@}" --platform linux/amd64
    ;;

  rebuild)
      buildImages --no-cache '${@}' --platform linux/amd64
    ;;

  run)
      startHarness
      echo ""
      runTests "${TAGS}" "${@}"
      echo ""
      stopHarness auto
    ;;
  runset)
      runRunSet "${@}"
    ;;
  start)
      startHarness
    ;;
  dry-run)
      runTests "${TAGS}" "${@}" --dry-run --no-summary --no-source
    ;;
  test)
      runTests "${TAGS}" "${@}"
      exit_status=$?
    ;;
  stop)
      stopHarness
    ;;
  service)
      serviceCommand "${@}"
    ;;
  tags)
      grep -h @ aries-test-harness/features/*feature |  tr " " "\n" | sort -u | fmt
    ;;
  rm)
      deleteAgents
    ;;

  tests|scenarios)
      # Basic impl: grep -h -B 1 Scenario aries-test-harness/features/*feature
      python aries-test-harness/util/scenarios.py "$@"
    ;;

  dockerhost)
      echo "${DOCKERHOST}"
    ;;
  *)
      usage
    ;;

esac

popd > /dev/null
exit ${exit_status}